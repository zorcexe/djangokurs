###########
# BUILDER
###########

# pull official base image
FROM python:3.11.2-alpine as builder
LABEL maintainer="friendlybytes.com"

# set work directory
WORKDIR /usr/src/app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install psycopg2 dependencies
RUN apk update \
    && apk add postgresql-dev gcc python3-dev musl-dev \
    && pip install --upgrade pip \
    && pip install pip-tools

# RUN pip install --upgrade pip
# COPY . .

# RUN apk add --update make
# RUN pip install --upgrade pip
# RUN pip install pip-tools
COPY ./requirements.in .
RUN pip-compile requirements.in -o requirements.txt \
    && pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt

# install dependencies
# RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt

#########
# FINAL #
#########

# pull official base image
FROM python:3.11.2-alpine
ENV HOME=/home/app
ENV APP_HOME=/home/app/web

# create directory for the app user
RUN mkdir -p /home/app \
    && addgroup -S app && adduser -S app -G app \
    && mkdir $APP_HOME \
    && mkdir $APP_HOME/staticfiles \
    && mkdir $APP_HOME/mediafiles

# create the app user
# RUN addgroup -S app && adduser -S app -G app

# create the appropriate directories
# RUN mkdir $APP_HOME
# RUN mkdir $APP_HOME/staticfiles
# RUN mkdir $APP_HOME/mediafiles
WORKDIR $APP_HOME

# install dependencies
RUN apk update && apk add libpq
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.txt .
RUN pip install --no-cache /wheels/*

# copy entrypoint.prod.sh
COPY ./entrypoint.prod.sh .
RUN sed -i 's/\r$//g'  $APP_HOME/entrypoint.prod.sh
RUN chmod +x  $APP_HOME/entrypoint.prod.sh

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app
# run entrypoint.prod.sh
ENTRYPOINT ["/home/app/web/entrypoint.prod.sh"]
